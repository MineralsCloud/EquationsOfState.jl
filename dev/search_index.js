var documenterSearchIndex = {"docs":
[{"location":"NonlinearFitting.html#Nonlinear-fitting-1","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"","category":"section"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"CurrentModule = EquationsOfState.NonlinearFitting","category":"page"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"From Ref. 1,","category":"page"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"The equations of state depend nonlinearly of a collection of parameters, E_0, V_0, B_0, B_0, ..., that represent physical properties of the solid at equilibrium and can, in principle, be obtained expermentally by independent methods. The use of a given analytical EOS may have significant influence on the results obtained, particularly because the parameters are far from being independent. The number of parameters has to be considered in comparing the goodness of fit of functional forms with different analytical flexibility. The possibility of using too many parameters, beyond what is physically justified by the information contained in the experimental data, is a serious aspect that deserves consideration.","category":"page"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"In EquationsOfState, the nonlinear fitting is currently implemented by LsqFit, a small library that provides basic least-squares fitting in pure Julia. It only utilizes the Levenberg-Marquardt algorithm for non-linear fitting. See its documentation for more information.","category":"page"},{"location":"NonlinearFitting.html#Usage-1","page":"Nonlinear fitting","title":"Usage","text":"","category":"section"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"We provide API lsqfit currently.","category":"page"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"using EquationsOfState\nusing EquationsOfState.Collections\nusing EquationsOfState.NonlinearFitting\n\nvolumes = [\n    25.987454833,\n    26.9045702104,\n    27.8430241908,\n    28.8029649591,\n    29.7848370694,\n    30.7887887064,\n    31.814968055,\n    32.8638196693,\n    33.9353435494,\n    35.0299842495,\n    36.1477417695,\n    37.2892088485,\n    38.4543854865,\n    39.6437162376,\n    40.857201102,\n    42.095136449,\n    43.3579668329,\n    44.6456922537,\n    45.9587572656,\n    47.2973100535,\n    48.6614988019,\n    50.0517680652,\n    51.4682660281,\n    52.9112890601,\n    54.3808371612,\n    55.8775030703,\n    57.4014349722,\n    58.9526328669,\n];\nenergies = [\n    -7.63622156576,\n    -8.16831294894,\n    -8.63871612686,\n    -9.05181213218,\n    -9.41170988374,\n    -9.72238224345,\n    -9.98744832526,\n    -10.210309552,\n    -10.3943401353,\n    -10.5427238068,\n    -10.6584266073,\n    -10.7442240979,\n    -10.8027285713,\n    -10.8363890521,\n    -10.8474912964,\n    -10.838157792,\n    -10.8103477586,\n    -10.7659387815,\n    -10.7066179666,\n    -10.6339907853,\n    -10.5495538639,\n    -10.4546677714,\n    -10.3506386542,\n    -10.2386366017,\n    -10.1197772808,\n    -9.99504030111,\n    -9.86535084973,\n    -9.73155247952,\n];\n\njulia> lsqfit(EnergyForm(), BirchMurnaghan3rd(40, 0.5, 4, 0), volumes, energies)\nBirchMurnaghan3rd{Float64}(40.989265727925826, 0.5369258245608038, 4.1786442319302015, -10.842803908298968)\n\njulia> lsqfit(EnergyForm(), Murnaghan(41, 0.5, 4, 0), volumes, energies)\nMurnaghan{Float64}(41.13757924894751, 0.5144967655882123, 3.912386317519504, -10.836794511015869)\n\njulia> lsqfit(EnergyForm(), PoirierTarantola3rd(41, 0.5, 4, 0), volumes, energies)\nPoirierTarantola3rd{Float64}(40.86770643567383, 0.5667729960008705, 4.331688934942696, -10.851486685029547)\n\njulia> lsqfit(EnergyForm(), Vinet(41, 0.5, 4, 0), volumes, energies)\nVinet{Float64}(40.91687567368755, 0.5493839427734198, 4.30519294991197, -10.846160810968053)","category":"page"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"Then 4 different equations of state will be fitted.","category":"page"},{"location":"NonlinearFitting.html#Public-interfaces-1","page":"Nonlinear fitting","title":"Public interfaces","text":"","category":"section"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"lsqfit(form::EquationForm, eos::EquationOfState{<:Real}, xdata::AbstractVector{<:Real}, ydata::AbstractVector{<:Real}; debug::Bool, kwargs...)","category":"page"},{"location":"NonlinearFitting.html#EquationsOfState.NonlinearFitting.lsqfit-Tuple{EquationForm,EquationsOfState.Collections.EquationOfState{#s3} where #s3<:Real,AbstractArray{#s2,1} where #s2<:Real,AbstractArray{#s1,1} where #s1<:Real}","page":"Nonlinear fitting","title":"EquationsOfState.NonlinearFitting.lsqfit","text":"lsqfit(form, eos, xdata, ydata; debug = false, kwargs...)\n\nFit an equation of state using least-squares fitting method (with the Levenberg-Marquardt algorithm).\n\nArguments\n\nform::EquationForm: an EquationForm instance. If EnergyForm, fit E(V); if PressureForm, fit P(V); if BulkModulusForm, fit B(V).\neos::EquationOfState: a trial equation of state. If it has units, xdata and ydata must also have.\nxdata::AbstractVector: a vector of volumes (V), with(out) units.\nydata::AbstractVector: a vector of energies (E), pressures (P), or bulk moduli (B), with(out) units. It must be consistent with form.\ndebug::Bool=false: if true, then an LsqFit.LsqFitResult is returned, containing estimated Jacobian, residuals, etc.; if false, a fitted EquationOfState is returned. The default value is false.\nkwargs: the rest keyword arguments are the same as that of LsqFit.curve_fit. See its documentation   and tutorial.\n\n\n\n\n\n","category":"method"},{"location":"NonlinearFitting.html#References-1","page":"Nonlinear fitting","title":"References","text":"","category":"section"},{"location":"NonlinearFitting.html#","page":"Nonlinear fitting","title":"Nonlinear fitting","text":"A. Otero-De-La-Roza, V. Lua√±a, Computer Physics Communications. 182, 1708‚Äì1720 (2011), doi:10.1016/j.cpc.2011.04.016.","category":"page"},{"location":"Find.html#Find-1","page":"Find volume","title":"Find","text":"","category":"section"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"CurrentModule = EquationsOfState.Find","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"This module contains a function findvolume, which is used to find an approximate volume at a given pressure, energy, or bulk modulus based on an equation of state. A result is not always guaranteed, especially when the equation of state is not a monotonic function of volume. However, according to experience, P(V) relation is usually a monotonic function. So we suggest using PressureForm to find the corresponding volume.","category":"page"},{"location":"Find.html#Usage-1","page":"Find volume","title":"Usage","text":"","category":"section"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"julia> using EquationsOfState, EquationsOfState.Collections, EquationsOfState.Find, Unitful, UnitfulAtomic\n\njulia> pressures = collect(0:20:200) .* u\"GPa\";\n\njulia> eos = BirchMurnaghan3rd(167u\"angstrom^3\", 2600u\"kbar\", 4.0);\n\njulia> volumes = map(\n           p -> findvolume(PressureForm(), eos, p, (eps() * u\"bohr^3\", eos.v0 * 1.3)),\n           pressures\n       )\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n[ Info: Using method \"Roots.Bisection\"...\n11-element Array{Quantity{Float64,ùêã^3,Unitful.FreeUnits{(‚Ñ´^3,),ùêã^3,nothing}},1}:\n              167.0 ‚Ñ´^3\n 156.14036210727835 ‚Ñ´^3\n 147.99803635986564 ‚Ñ´^3\n 141.51093713795865 ‚Ñ´^3\n 136.13864615965332 ‚Ñ´^3\n 131.56784031939347 ‚Ñ´^3\n 127.60046278645824 ‚Ñ´^3\n 124.10332447387113 ‚Ñ´^3\n 120.98257680606459 ‚Ñ´^3\n 118.16962836248427 ‚Ñ´^3\n 115.61284838696814 ‚Ñ´^3","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"Here we let the algorithm choose the bisection root-finding method to find the volumes corresponding to pressures.","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"A figure is plotted below to verify our results, and it fits very well.","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"(Image: findvolume)","category":"page"},{"location":"Find.html#Public-interfaces-1","page":"Find volume","title":"Public interfaces","text":"","category":"section"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"findvolume(form::EquationForm, eos::EquationOfState, y, x0, method)","category":"page"},{"location":"Find.html#EquationsOfState.Find.findvolume-Tuple{EquationForm,EquationsOfState.Collections.EquationOfState,Any,Any,Any}","page":"Find volume","title":"EquationsOfState.Find.findvolume","text":"findvolume(form, eos, y, x0, method)\nfindvolume(form, eos, y, x0::Union{AbstractVector,Tuple})\n\nFind a volume which leads to the given pressure, energy, or bulk modulus based on an eos.\n\nArguments\n\nform::EquationForm: an EquationForm instance.\neos::EquationOfState: an equation of state. If it has units, y and x0 must also have.\ny: a pressure, energy, or bulk modulus.\nx0: can be either a range of volumes (Vector, Tuple, etc.) or just a single volume.   Units can be provided if necessary.\nmethod::Roots.AbstractUnivariateZeroMethod: a method used to find the root of an equation.   If it is omitted, the algorithm will traverse all possible methods of    Roots.jl. And the x0 parameter must be   an array or a tuple, of which only the maximum and minimum values will be used in the   root-finding process.\n\n\n\n\n\n","category":"method"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"All available methods are the leaves of the tree below (Remember to add a Roots. prefix):","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"AbstractUnivariateZeroMethod\n‚îú‚îÄ AbstractBracketing\n‚îÇ  ‚îú‚îÄ AbstractAlefeldPotraShi\n‚îÇ  ‚îÇ  ‚îú‚îÄ A42\n‚îÇ  ‚îÇ  ‚îî‚îÄ AlefeldPotraShi\n‚îÇ  ‚îú‚îÄ AbstractBisection\n‚îÇ  ‚îÇ  ‚îú‚îÄ Bisection\n‚îÇ  ‚îÇ  ‚îú‚îÄ FalsePosition\n‚îÇ  ‚îÇ  ‚îî‚îÄ BisectionExact\n‚îÇ  ‚îî‚îÄ Brent\n‚îú‚îÄ AbstractHalleyLikeMethod\n‚îÇ  ‚îú‚îÄ Halley\n‚îÇ  ‚îî‚îÄ Schroder\n‚îú‚îÄ AbstractNewtonLikeMethod\n‚îÇ  ‚îî‚îÄ Newton\n‚îî‚îÄ AbstractNonBracketing\n   ‚îî‚îÄ AbstractSecant\n      ‚îú‚îÄ Order0\n      ‚îú‚îÄ Order16\n      ‚îú‚îÄ Order2\n      ‚îú‚îÄ Order5\n      ‚îú‚îÄ Order8\n      ‚îú‚îÄ Esser\n      ‚îú‚îÄ King\n      ‚îú‚îÄ KumarSinghAkanksha\n      ‚îú‚îÄ Order1B\n      ‚îú‚îÄ Order2B\n      ‚îú‚îÄ Secant\n      ‚îú‚îÄ Steffensen\n      ‚îú‚îÄ Thukral16\n      ‚îî‚îÄ Thukral8","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"The usage is like","category":"page"},{"location":"Find.html#","page":"Find volume","title":"Find volume","text":"findvolume(form, eos, y, (3, 4))                     # Try all possible methods\nfindvolume(form, eos, y, (3, 4), Order1())           # Specify two starting points for secant method\nfindvolume(form, eos, y, 3.0, Order2())              # Use Steffensen method\nfindvolume(form, eos, y, big(3.0), Order16())        # Rapid convergence\nfindvolume(form, eos, y, (3, 4), Roots.A42())      # Fewer function calls than Bisection(), in this case\nfindvolume(form, eos, y, (3, 4), FalsePosition(8))   # 1 of 12 possible algorithms for false position\nfindvolume(form, eos, y, 3.0, Roots.Newton())        # Use Newton's method\nfindvolume(form, eos, y, 3.0, Roots.Halley())        # Use Halley's method","category":"page"},{"location":"Collections.html#Collections-1","page":"Collections","title":"Collections","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"CurrentModule = EquationsOfState.Collections","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"The current EquationOfStates contain","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"EquationOfState\n‚îú‚îÄ AntonSchmidt\n‚îú‚îÄ BreenanStacey\n‚îú‚îÄ FiniteStrainEquationOfState\n‚îÇ  ‚îú‚îÄ BirchMurnaghan2nd\n‚îÇ  ‚îú‚îÄ BirchMurnaghan3rd\n‚îÇ  ‚îú‚îÄ BirchMurnaghan4th\n‚îÇ  ‚îú‚îÄ PoirierTarantola2nd\n‚îÇ  ‚îú‚îÄ PoirierTarantola3rd\n‚îÇ  ‚îî‚îÄ PoirierTarantola4th\n‚îú‚îÄ Murnaghan\n‚îî‚îÄ Vinet","category":"page"},{"location":"Collections.html#Usage-1","page":"Collections","title":"Usage","text":"","category":"section"},{"location":"Collections.html#Construct-an-EquationOfState-1","page":"Collections","title":"Construct an EquationOfState","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"We will use BirchMurnaghan3rd as an example.","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"A BirchMurnaghan3rd can be constructed from scratch, as shown above. It can also be constructed from an existing BirchMurnaghan3rd, with Setfield.jl @set! macro:","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"julia> using Setfield\n\njulia> eos = Murnaghan(1, 2, 3.0)\nMurnaghan{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> @set! eos.v0 = 4\nMurnaghan{Float64}(4.0, 2.0, 3.0, 0.0)\n\njulia> eos\nMurnaghan{Float64}(4.0, 2.0, 3.0, 0.0)","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"To modify multiple fields (say, :v0, :bp0, :bpp0, :e0) at a time, use @batchlens from Kaleido.jl:","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"julia> using Setfield, Kaleido\n\njulia> lens = @batchlens(begin\n           _.v0\n           _.bp0\n           _.bpp0\n           _.e0\n       end)\nIndexBatchLens(:v0, :bp0, :bpp0, :e0)\n\njulia> eos = BirchMurnaghan4th(1, 2.0, 3, 4)\nBirchMurnaghan4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> set(eos, lens, (5, 6, 7, 8))\nBirchMurnaghan4th{Float64}(5.0, 2.0, 6.0, 7.0, 8.0)","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"Users can access BirchMurnaghan3rd's elements by \"dot notation\":","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"julia> eos = BirchMurnaghan3rd(1, 2, 3, 4.0)\n4-element BirchMurnaghan3rd{Float64}:\n 1.0\n 2.0\n 3.0\n 4.0\n\njulia> eos.v0\n1.0","category":"page"},{"location":"Collections.html#Calculate-energy-on-an-EquationOfState-1","page":"Collections","title":"Calculate energy on an EquationOfState","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"The E(V) relation of equations of state are listed as below:","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"Murnaghan:\nE(V) = E_0+K_0 V_0leftfrac1K_0^primeleft(K_0^prime-1right)left(fracVV_0right)^1-K_0^prime+frac1K_0^prime fracVV_0-frac1K_0^prime-1right\nBirchMurnaghan2nd:\nE(V) = E_0 + frac98 B_0 V_0 left(left( V  V_0 right)^-2  3-1right)^2\nBirchMurnaghan3rd:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nwhere x = V  V_0, and f = frac 1  2  bigg bigg( frac V_0  V  bigg)^23 - 1 bigg.\nBirchMurnaghan4th:\nE(V) = E_0+frac38 V_0 B_0 f^2leftleft(9 H-63 B_0^prime+143right) f^2+12left(B_0^prime-4right) f+12right\nwhere H = B_0 B_0 + (B_0)^2.\nPoirierTarantola2nd:\nE(V) = E_0+frac12 B_0 V_0 ln ^2 x\nPoirierTarantola3rd:\nE(V) = E_0+frac16 B_0 V_0 ln ^2 xleftleft(B_0^prime+2right) ln x+3right\nPoirierTarantola4th:\nE(V) = E_0+frac124 B_0 V_0 ln ^2 xleftleft(H+3 B_0^prime+3right) ln ^2 xright left+4left(B_0^prime+2right) ln x+12right\nwhere H = B_0 B_0 + (B_0)^2.\nVinet:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nAntonSchmidt:\nE(V)=fracbeta V_0n+1left(fracVV_0right)^n+1leftln left(fracVV_0right)-frac1n+1right+E_infty","category":"page"},{"location":"Collections.html#Calculate-pressure-on-an-EquationOfState-1","page":"Collections","title":"Calculate pressure on an EquationOfState","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"The P(V) relation of equations of state are listed as below:","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"Murnaghan:\nP(V) = fracB_0B_0^primeleftleft(fracV_0Vright)^B_0^prime-1right\nBirchMurnaghan2nd:\nP(V) = frac32 B_0left(x^-7  3-x^-5  3right)\nBirchMurnaghan3rd:\nP(V) = frac38 B_0 fracx^2  3-1x^10  3left3 B_0^prime x-16 x-3 x^1  3left(B_0^prime-4right)right\nBirchMurnaghan4th:\nP(V) = frac12 B_0(2 f+1)^5  2leftleft(9 H-63 B_0^prime+143right) f^2rightleft+9left(B_0^prime-4right) f+6right\nPoirierTarantola2nd:\nP(V) = -fracB_0x ln x\nPoirierTarantola3rd:\nP(V) = -fracB_0 ln x2 xleftleft(B_0^prime+2right) ln x+2right\nPoirierTarantola4th:\nP(V) = -fracB_0 ln x6 xleftleft(H+3 B_0^prime+3right) ln ^2 x+3left(B_0^prime+6right) ln x+6right\nVinet:\nP(V) = 3 B_0 frac1-etaeta^2 exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nP(V) = -betaleft(fracVV_0right)^n ln left(fracVV_0right)","category":"page"},{"location":"Collections.html#Calculate-bulk-modulus-on-an-EquationOfState-1","page":"Collections","title":"Calculate bulk modulus on an EquationOfState","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"The B(V) relation of equations of state are listed as below:","category":"page"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"BirchMurnaghan2nd:\nB(V) = B_0(7 f+1)(2 f+1)^5  2\nBirchMurnaghan3rd:\nB(V) = fracB_08 x^10  3leftx^5  3left(15 B_0^prime-80right)-xleft(42 B_0^prime-196right)rightleft+27 x^1  3left(B_0^prime-4right)right\nBirchMurnaghan4th:\nB(V) = frac16 B_0(2 f+1)^5  2leftleft(99 H-693 B_0^prime+1573right) f^3rightleft+left(27 H-108 B_0^prime+105right) f^2+6left(3 B_0^prime-5right) f+6right\nPoirierTarantola2nd:\nB(V) = fracB_0x(1-ln x)\nPoirierTarantola3rd:\nB(V) = -fracB_02 xleftleft(B_0^prime+2right) ln x(ln x-1)-2right\nPoirierTarantola4th:\nB(V) = -fracB_06 xleftleft(H+3 B_0^prime+3right) ln ^3 x-3left(H+2 B_0^prime+1right) ln ^2 xrightleft-6left(B_0^prime+1right) ln x-6right\nVinet:\nB(V) = -fracB_02 eta^2left3 eta(eta-1)left(B_0^prime-1right)+2(eta-2)righttimes exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nB(V) = betaleft(fracVV_0right)^nleft1+n ln fracVV_0right","category":"page"},{"location":"Collections.html#Types-1","page":"Collections","title":"Types","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"EquationOfState\nFiniteStrainEquationOfState\nMurnaghan\nBirchMurnaghan2nd\nBirchMurnaghan3rd\nBirchMurnaghan4th\nPoirierTarantola2nd\nPoirierTarantola3rd\nPoirierTarantola4th\nVinet","category":"page"},{"location":"Collections.html#EquationsOfState.Collections.EquationOfState","page":"Collections","title":"EquationsOfState.Collections.EquationOfState","text":"EquationOfState{T}\n\nAn abstraction of equations of state, where T specifies the elements' common type.\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.FiniteStrainEquationOfState","page":"Collections","title":"EquationsOfState.Collections.FiniteStrainEquationOfState","text":"FiniteStrainEquationOfState{T} <: EquationOfState{T}\n\nAn abstraction of finite strain equations of state, where T specifies the elements' common type.\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.Murnaghan","page":"Collections","title":"EquationsOfState.Collections.Murnaghan","text":"Murnaghan(v0, b0, bp0, e0)\n\nCreate a Murnaghan equation of state. The elements' type will be handled automatically.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nExamples\n\njulia> Murnaghan(1, 2, 3.0)\nMurnaghan{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> Murnaghan(Int8(1), 2//1, 3.0, 4)\nMurnaghan{Float64}(1.0, 2.0, 3.0, 4.0)\n\njulia> Murnaghan(1u\"nm^3\", 2u\"GPa\", 3, 3.0u\"eV\")\nMurnaghan{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0, 3.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.BirchMurnaghan2nd","page":"Collections","title":"EquationsOfState.Collections.BirchMurnaghan2nd","text":"BirchMurnaghan2nd(v0, b0, e0)\n\nCreate a Birch‚ÄìMurnaghan 2nd order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: BirchMurnaghan3rd, BirchMurnaghan4th\n\nExamples\n\njulia> BirchMurnaghan2nd(1, 2.0)\nBirchMurnaghan2nd{Float64}(1.0, 2.0, 0.0)\n\njulia> BirchMurnaghan2nd(Int8(1), 2//1, 0.0)\nBirchMurnaghan2nd{Float64}(1.0, 2.0, 0.0)\n\njulia> BirchMurnaghan2nd(1u\"nm^3\", 2u\"GPa\", 3.0u\"eV\")\nBirchMurnaghan2nd{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.BirchMurnaghan3rd","page":"Collections","title":"EquationsOfState.Collections.BirchMurnaghan3rd","text":"BirchMurnaghan3rd(v0, b0, bp0, e0)\n\nCreate a Birch‚ÄìMurnaghan 3rd order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: BirchMurnaghan2nd, BirchMurnaghan4th\n\nExamples\n\njulia> BirchMurnaghan3rd(1, 2.0, 3)\nBirchMurnaghan3rd{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> BirchMurnaghan3rd(Int8(1), 2//1, 4, 0.0)\nBirchMurnaghan3rd{Float64}(1.0, 2.0, 4.0, 0.0)\n\njulia> BirchMurnaghan3rd(1u\"nm^3\", 2u\"GPa\", 4.0, 3u\"eV\")\nBirchMurnaghan3rd{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 4.0, 3.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.BirchMurnaghan4th","page":"Collections","title":"EquationsOfState.Collections.BirchMurnaghan4th","text":"BirchMurnaghan4th(v0, b0, bp0, bpp0, e0)\n\nCreate a Birch‚ÄìMurnaghan 4th order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\nbpp0: the second-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: BirchMurnaghan2nd, BirchMurnaghan4th\n\nExamples\n\njulia> BirchMurnaghan4th(1, 2.0, 3, 4)\nBirchMurnaghan4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> BirchMurnaghan4th(Int8(1), 2//1, 4, 5.0, Float16(6))\nBirchMurnaghan4th{Float64}(1.0, 2.0, 4.0, 5.0, 6.0)\n\njulia> BirchMurnaghan4th(1u\"nm^3\", 2u\"GPa\", 3.0, 4u\"1/GPa\", 5u\"eV\")\nBirchMurnaghan4th{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0, 4.0 GPa^-1, 5.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.PoirierTarantola2nd","page":"Collections","title":"EquationsOfState.Collections.PoirierTarantola2nd","text":"PoirierTarantola2nd(v0, b0, e0)\n\nCreate a Poirier‚ÄìTarantola order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: PoirierTarantola3rd, PoirierTarantola4th\n\nExamples\n\njulia> PoirierTarantola2nd(1, 2.0)\nPoirierTarantola2nd{Float64}(1.0, 2.0, 0.0)\n\njulia> PoirierTarantola2nd(Int8(1), 2//1, 3.0)\nPoirierTarantola2nd{Float64}(1.0, 2.0, 3.0)\n\njulia> PoirierTarantola2nd(1u\"nm^3\", 2u\"GPa\", 3.0u\"eV\")\nPoirierTarantola2nd{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.PoirierTarantola3rd","page":"Collections","title":"EquationsOfState.Collections.PoirierTarantola3rd","text":"PoirierTarantola3rd(v0, b0, bp0, e0)\n\nCreate a Poirier‚ÄìTarantola 3rd order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: PoirierTarantola2nd, PoirierTarantola4th\n\nExamples\n\njulia> PoirierTarantola3rd(1, 2.0, 3)\nPoirierTarantola3rd{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> PoirierTarantola3rd(Int8(1), 2//1, 3.0, Float16(4))\nPoirierTarantola3rd{Float64}(1.0, 2.0, 3.0, 4.0)\n\njulia> PoirierTarantola3rd(1u\"nm^3\", 2u\"GPa\", 3, 4.0u\"eV\")\nPoirierTarantola3rd{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0, 4.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.PoirierTarantola4th","page":"Collections","title":"EquationsOfState.Collections.PoirierTarantola4th","text":"PoirierTarantola4th(v0, b0, bp0, bpp0, e0)\n\nCreate a Birch‚ÄìMurnaghan 4th order equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\nbpp0: the second-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nSee also: PoirierTarantola2nd, PoirierTarantola3rd\n\nExamples\n\njulia> PoirierTarantola4th(1, 2.0, 3, 4)\nPoirierTarantola4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> PoirierTarantola4th(Int8(1), 2//1, 3.0, Float16(4), 5)\nPoirierTarantola4th{Float64}(1.0, 2.0, 3.0, 4.0, 5.0)\n\njulia> PoirierTarantola4th(1u\"nm^3\", 2u\"GPa\", 3, 4u\"1/GPa\", 5.0u\"eV\")\nPoirierTarantola4th{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0, 4.0 GPa^-1, 5.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#EquationsOfState.Collections.Vinet","page":"Collections","title":"EquationsOfState.Collections.Vinet","text":"Vinet(v0, b0, bp0, e0)\n\nCreate a Vinet equation of state. The elements' type will be handled automatically.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbp0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure. Its default value is 0u\"eV\" (0), if other parameters have (no) units.\n\nExamples\n\njulia> Vinet(1, 2.0, 3)\nVinet{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> Vinet(Int8(1), 2//1, 3.0, Float16(4))\nVinet{Float64}(1.0, 2.0, 3.0, 4.0)\n\njulia> Vinet(1u\"nm^3\", 2u\"GPa\", 3, 4.0u\"eV\")\nVinet{Quantity{Float64,D,U} where U where D}(1.0 nm^3, 2.0 GPa, 3.0, 4.0 eV)\n\n\n\n\n\n","category":"type"},{"location":"Collections.html#Public-interfaces-1","page":"Collections","title":"Public interfaces","text":"","category":"section"},{"location":"Collections.html#","page":"Collections","title":"Collections","text":"apply(::EnergyForm, eos::EquationOfState)\napply(::EnergyForm, eos::Murnaghan, v)\napply(::PressureForm, eos::Murnaghan, v)\napply(::BulkModulusForm, eos::BirchMurnaghan2nd, v)","category":"page"},{"location":"Collections.html#EquationsOfState.Collections.apply-Tuple{EnergyForm,EquationsOfState.Collections.EquationOfState}","page":"Collections","title":"EquationsOfState.Collections.apply","text":"apply(EnergyForm(), eos::EquationOfState)\napply(PressureForm(), eos::EquationOfState)\napply(BulkModulusForm(), eos::EquationOfState)\n\nReturn a function that takes a volume as a variable, suitable for mapping onto an array.\n\nExamples\n\njulia> using EquationsOfState, EquationsOfState.Collections\n\njulia> f = apply(EnergyForm(), Vinet(1, 2, 3));\n\njulia> map(f, 1:1:10)\n10-element Array{Float64,1}:\n 0.0\n 0.367905230584308\n 0.7652477289745814\n 1.0516459435179233\n 1.2560420090256408\n 1.405149833626178\n 1.5165867441792136\n 1.6017034530570884\n 1.6679539823686644\n 1.7203642945516917\n\njulia> g = apply(PressureForm(), Vinet(1, 2, 3));\n\njulia> map(g, 1:1:10)\n10-element Array{Float64,1}:\n  0.0\n -0.45046308428750254\n -0.3384840350043251\n -0.24010297221667418\n -0.17314062272722755\n -0.12795492664586872\n -0.09677154467733216\n -0.07468060255179591\n -0.05864401631176751\n -0.04674768462396211\n\njulia> h = apply(BulkModulusForm(), BirchMurnaghan3rd(1, 2, 3));\n\njulia> map(h, 1:1:10)\n10-element Array{Float64,1}:\n 2.0\n 0.9216086833346415\n 0.444903691617472\n 0.2540009203153288\n 0.16193296566524193\n 0.11130584492987289\n 0.08076305569984538\n 0.06103515625\n 0.047609811583958425\n 0.03808959181078831\n\nHowever, these methods are preserved for special cases (see #52). In most cases, the Julia do block syntax is preferred:\n\njulia> map(1:1:10) do v\n           apply(EnergyForm(), eos, v)\n       end\n10-element Array{Float64,1}:\n 0.0\n 0.367905230584308\n 0.7652477289745814\n 1.0516459435179235\n 1.2560420090256412\n 1.405149833626178\n 1.5165867441792138\n 1.6017034530570884\n 1.6679539823686644\n 1.7203642945516917\n\n\n\n\n\n","category":"method"},{"location":"Collections.html#EquationsOfState.Collections.apply-Tuple{EnergyForm,EquationsOfState.Collections.Murnaghan,Any}","page":"Collections","title":"EquationsOfState.Collections.apply","text":"apply(EnergyForm(), eos::EquationOfState, v)\n\nReturn the energy of an EquationOfState on volume v. If eos has units, v must also has.\n\n\n\n\n\n","category":"method"},{"location":"Collections.html#EquationsOfState.Collections.apply-Tuple{PressureForm,EquationsOfState.Collections.Murnaghan,Any}","page":"Collections","title":"EquationsOfState.Collections.apply","text":"apply(PressureForm(), eos::EquationOfState, v)\n\nReturn the pressure of an EquationOfState on volume v. If eos has units, v must also has.\n\n\n\n\n\n","category":"method"},{"location":"Collections.html#EquationsOfState.Collections.apply-Tuple{BulkModulusForm,EquationsOfState.Collections.BirchMurnaghan2nd,Any}","page":"Collections","title":"EquationsOfState.Collections.apply","text":"apply(BulkModulusForm(), eos::EquationOfState, v)\n\nReturn the bulk modulus of an EquationOfState on volume v. If eos has units, v must also has.\n\n\n\n\n\n","category":"method"},{"location":"Python.html#How-to-use-EquationsOfState-in-Python?-1","page":"Interoperability","title":"How to use EquationsOfState in Python?","text":"","category":"section"},{"location":"Python.html#","page":"Interoperability","title":"Interoperability","text":"It may be attempting for Pythonistas to use this package in Python, without writing too much code. Luckily, Julia provides such a feature.","category":"page"},{"location":"Python.html#","page":"Interoperability","title":"Interoperability","text":"First, install PyCall.jl, following their instructions. Notice on macOS, that if you want to install Python from pyenv, you may need to run\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.6.9\nin terminal to install your python, or else Julia will throw an\nImportError: No module named site\nSee this issue and another issue for details.\nInstall PyJulia in Python. Please see its official tutorial for instructions.\nOpen a (an) Python (IPython) session, start playing!\nIn [1]: from julia import Unitful\n\nIn [2]: from julia.EquationsOfState import *\n\nIn [3]: from julia.EquationsOfState.Collections import *\n\nIn [4]: from julia.EquationsOfState import *\n\nIn [5]: Murnaghan(1, 2, 3.0, 4)\nOut[5]: <PyCall.jlwrap EquationsOfState.Collections.Murnaghan{Float64}(1.0, 2.0, 3.0, 4.0)>\n\nIn [6]: result = lsqfit(\n   ...:     PressureForm(),\n   ...:     BirchMurnaghan3rd(1, 2, 3.0, 0),\n   ...:     [1, 2, 3, 4, 5],\n   ...:     [5, 6, 9, 8, 7],\n   ...: )\n\nIn [7]: result.v0, result.b0, result.bp0\nOut[7]: (1.1024687826913997, 29.308616965851673, 12.689089874230556)\n\nIn [8]: from julia import Main\n\nIn [9]: volumes = Main.eval(\"data[:, 1] .* UnitfulAtomic.bohr^3\")\n\nIn [10]: energies = Main.eval(\"data[:, 2] .* UnitfulAtomic.Ry\")\n\nIn [11]: Main.eval(\"EquationsOfState.NonlinearFitting.lsqfit(EquationsOfState.EnergyForm(), EquationsOfState.Collections.Murnaghan(224.445371 * UnitfulAtomic.bohr^3, 9.164446 * Unitful.GPa, 3.752432, -161.708856 * UnitfulAtomic.hartree), volumes, energies)\")\nOut[11]: <PyCall.jlwrap EquationsOfState.Collections.Murnaghan{Unitful.Quantity{Float64,D,U} where U where D}(224.5018173532159 a‚ÇÄ^3, 8.896845579229117 GPa, 3.7238388137735674, -161.70884303138902 E‚Çï)>\nwhere data is copied from Julia:\nIn [1]: data = Main.eval(\"\"\"\n   ...:    [\n   ...:        159.9086 -323.4078898\n                   ‚ãÆ          ‚ãÆ\n   ...:        319.8173 -323.4105393\n   ...:    ]\n   ...:    \"\"\"\n   ...: )","category":"page"},{"location":"FAQ.html#FAQ-1","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"FAQ.html#How-to-make-a-Vector-from-an-EquationOfState?-1","page":"FAQ","title":"How to make a Vector from an EquationOfState?","text":"","category":"section"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"A suggested way is to use the IterTools.fieldvalues function:","category":"page"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"julia> using IterTools\n\njulia> eos = BirchMurnaghan4th(1, 2.0, 3, 4)\nBirchMurnaghan4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> collect(fieldvalues(eos))\n5-element Array{Any,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n 0.0","category":"page"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"It is lazy and fast. But the Vector has element type Any.","category":"page"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"Or to write a non-lazy version of fieldvalues manually:","category":"page"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"julia> fieldvalues(eos::EquationOfState) = [getfield(eos, i) for i in 1:nfields(eos)]\nfieldvalues (generic function with 1 method)\n\njulia> Collections.fieldvalues(eos)\n5-element Array{Float64,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n 0.0","category":"page"},{"location":"FAQ.html#","page":"FAQ","title":"FAQ","text":"It is slower than IterTools.fieldvalues but has the exact element type Float64. Use it with care.","category":"page"},{"location":"Portability.html#How-to-make-your-data-portable?-1","page":"Portability","title":"How to make your data portable?","text":"","category":"section"},{"location":"Portability.html#","page":"Portability","title":"Portability","text":"After an equation-of-state-fitting, for instance, you want to save the returned EquationOfState to share with a colleague or for future use. Julia provides several ways to do this. Below I will list one recommended way: saving it to a JLD format by JLD2.jl package.","category":"page"},{"location":"Portability.html#","page":"Portability","title":"Portability","text":"JLD is a specific \"dialect\" of HDF5, a cross-platform, multi-language data storage format most frequently used for scientific data.","category":"page"},{"location":"Portability.html#","page":"Portability","title":"Portability","text":"Install JLD2.jl and  FileIO.jl packages.\njulia> using Pkg\n\njulia> Pkg.add(\"FileIO\"); Pkg.add(\"JLD2\")\nCreate some EquationOfStates:\njulia> using EquationsOfState.Collections, Unitful, UnitfulAtomic\n\njulia> m = Murnaghan(224.501825, 0.00060479524074699499, 3.723835, -323.417686)\nMurnaghan{Float64}(224.501825, 0.000604795240746995, 3.723835, -323.417686)\n\njulia> bm = BirchMurnaghan3rd(224.4445656763778u\"bohr^3\", 9.194980249913018u\"GPa\", 3.7403684211716297, -161.70885710742223u\"hartree\")\nBirchMurnaghan3rd{Quantity{Float64,D,U} where U where D}(224.4445656763778 a‚ÇÄ^3, 9.194980249913018 GPa, 3.7403684211716297, -161.70885710742223 E‚Çï)\nSave them to file \"eos.jld2\":\njulia> using JLD2, FileIO\n\njulia> @save \"/some/path/eos.jld2\" m bm\nOn another computer, or some days later, load them into REPL:\njulia> using EquationsOfState.Collections, Unitful, UnitfulAtomic\n\njulia> @load \"/some/path/eos.jld2\" m bm\nNow variables m and bm represent the orginal EquationOfStates:\njulia> m.b0\n0.000604795240746995\n\njulia> m.bp0\n3.723835\n\njulia> bm.v0\n224.4445656763778 a‚ÇÄ^3\n\njulia> bm.b0\n9.194980249913018 GPa","category":"page"},{"location":"Portability.html#","page":"Portability","title":"Portability","text":"For more details on the JLD format, please refer to JLD.jl's doc, JLD2.jl's doc or this discussion.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = EquationsOfState","category":"page"},{"location":"index.html#EquationsOfState-1","page":"Home","title":"EquationsOfState","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"note: Note\nStarting from v2.0.0, EquationsOfState.jl has been rewritten. The former behaviors of EquationsOfState.jl (v1.1.4 and earlier) will be deprecated. Please follow the latest documentation.","category":"page"},{"location":"index.html#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Calculate energy, pressure, and bulk modulus of an EquationOfState on a (an) volume (array of volumes).\nFit an EquationOfState on a series of volumes using least-squares fitting method.\nFit an EquationOfState on a series of volumes linearly.\nFind the corresponding volume of an EquationOfState given an (a) energy, pressure, and bulk modulus.\nHandle unit conversion automatically in the above features, take any unit.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"index.html#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\n    \"Collections.md\",\n    \"NonlinearFitting.md\",\n    \"Find.md\",\n    \"Portability.md\",\n    \"Python.md\",\n    \"FAQ.md\",\n]\nDepth = 3","category":"page"},{"location":"index.html#main-index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Modules = [EquationsOfState]","category":"page"},{"location":"Installation.html#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"Pages = [\"Installation.md\"]\nDepth = 5","category":"page"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"To install this package, first, you need to install a julia executable from its official website. Version v1.0.0 and above is required. This package may not work on v0.7 and below.","category":"page"},{"location":"Installation.html#Installing-Julia-1","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"Installation.html#on-macOS-1","page":"Installation","title":"on macOS","text":"","category":"section"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"If you are using a Mac, and have Homebrew installed, open Terminal.app and type:","category":"page"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"brew cask install julia","category":"page"},{"location":"Installation.html#on-Linux-1","page":"Installation","title":"on Linux","text":"","category":"section"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"On Linux, the best way to install Julia is to use the Generic Linux Binaries. The JILL script does this for you. Just run","category":"page"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"bash -ci \"$(curl -fsSL https://raw.githubusercontent.com/abelsiqueira/jill/master/jill.sh)\"","category":"page"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"installs Julia into $HOME/.local/bin. This script also has a Python version, JILL.py. It can also be used on macOS.","category":"page"},{"location":"Installation.html#Installing-the-package-1","page":"Installation","title":"Installing the package","text":"","category":"section"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"Open Terminal.app, and type julia to start a Julia session.\nRun\njulia> using Pkg; Pkg.update()\n\njulia> Pkg.add(\"Unitful\")\n\njulia> Pkg.add(\"UnitfulAtomic\")\n\njulia> Pkg.add(\"EquationsOfState\")\nand wait for its finish.\nRun\njulia> using EquationsOfState, EquationsOfState.Collections, EquationsOfState.Find, EquationsOfState.NonlinearFitting, Unitful, UnitfulAtomic\nand have fun!\nWhile using, please keep this Julia session alive. Restarting may recompile the package and cost some time.","category":"page"},{"location":"Installation.html#Reinstall-1","page":"Installation","title":"Reinstall","text":"","category":"section"},{"location":"Installation.html#","page":"Installation","title":"Installation","text":"In the same Julia session, run\njulia> Pkg.rm(\"EquationsOfState\"); Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and repeat the above steps.","category":"page"}]
}
